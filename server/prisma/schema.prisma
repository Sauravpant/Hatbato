generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum ReportFor {
  user
  product
}

enum NotificationType {
  account_created
  account_verified
  order_placed
  product_added
  password_changed
}

enum ProductStatus {
  new
  like_new
  used
  refurbished
  damaged
  for_parts
}

model User {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  password        String
  role            Role           @default(user)
  imageUrl        String?
  imagePublicId   String?
  address         String
  contactNumber   String         @unique
  refreshToken    String?
  isVerified      Boolean        @default(false)
  products        Product[]
  notifications   Notification[]
  reviewsGiven    Review[]       @relation("Reviewer")
  reviewsReceived Review[]       @relation("Seller")
  reportsMade     Report[]       @relation("ReportAuthor")
  userReports     Report[]       @relation("ReportedUser")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([email])
}

model Product {
  id                String                               @id @default(uuid())
  title             String
  description       String
  price             Decimal                              @db.Decimal(10, 2)
  address           String
  location          Unsupported("geography(point,4326)")
  latitude          Float
  longitude         Float
  imageUrl          String
  imagePublicId     String
  deliveryAvailable Boolean
  status            ProductStatus
  postedAt          DateTime                             @default(now())
  user              User                                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  category          Category                             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        String
  reports           Report[]                             @relation("ReportedProduct")

  @@index([latitude, longitude])
  @@index([title])
  @@index([userId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slogan      String
  description String
  slug        String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String
  seller     User     @relation("Seller", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId   String
  createdAt  DateTime @default(now())
}

model Otp {
  email     String   @id
  otp       String
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Report {
  id                String    @id @default(uuid())
  reason            String
  description       String
  reportFor         ReportFor
  reportedById      String
  reportedProductId String?
  reportedUserId    String?
  reportedBy        User      @relation("ReportAuthor", fields: [reportedById], references: [id], onDelete: Cascade)
  reportedProduct   Product?  @relation("ReportedProduct", fields: [reportedProductId], references: [id], onDelete: Cascade)
  reportedUser      User?     @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())

  @@index([reportedProductId])
  @@index([reportedUserId])
  @@index([reportedById])
}
