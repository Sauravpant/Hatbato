generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum NotificationType {
  account_created
  account_verified
  order_placed
  product_added
  password_changed
}

enum ProductStatus {
  new
  like_new
  used
  refurbished
  damaged
  for_parts
}

model User {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  password        String
  role            Role           @default(user)
  imageUrl        String? // Display URL of user's profile image
  imagePublicId   String? // Cloudinary public ID for image deletion/updating
  address         String // User's address/profile location
  contactNumber   String         @unique
  refreshToken    String? // For JWT refresh token
  isVerified      Boolean        @default(false) // Email verification status
  products        Product[]
  notification    Notification[]
  reviewsGiven    Review[]       @relation("Reviewer")
  reviewsReceived Review[]       @relation("Seller")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([email])
}

model Product {
  id                String                                  @id @default(uuid())
  title             String
  description       String
  price             Decimal                              @db.Decimal(10, 2)
  address           String
  location          Unsupported("geography(point,4326)") //PostgresSQL PostGIS
  latitude          Float // Geographic coordinate
  longitude         Float // Geographic coordinate
  imageUrl          String // Image URL for display
  imagePublicId     String // Cloudinary public ID for image management
  deliveryAvailable Boolean
  status            ProductStatus
  postedAt          DateTime                             @default(now())
  user              User                                 @relation(fields: [userId], references: [id])
  userId            String
  category          Category                             @relation(fields: [categoryId], references: [id])
  categoryId        String

  @@index([latitude, longitude])
  @@index([title])
}

model Category {
  id          String       @id @default(uuid())
  name        String    @unique
  slogan      String
  description String
  slug        String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id         String      @id @default(uuid())
  rating     Int // e.g. 1 to 5
  comment    String?
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId String
  seller     User     @relation("Seller", fields: [sellerId], references: [id])
  sellerId   String
  createdAt  DateTime @default(now())
}

model Otp {
  email     String   @id // Email to which OTP was sent
  otp       String // OTP code
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String // Notification message
  read      Boolean          @default(false) // Read status
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
}
